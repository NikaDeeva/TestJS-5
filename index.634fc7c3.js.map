{"mappings":"AAEA,MAAMA,ECkBc,EAACC,EAAO,MAC1B,IAAIC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAClD,KAAOA,KACLC,GCvBF,mEDuBwC,GAAdC,EAAMF,IAEhC,OAAOC,CAAE,EDxBA,CAAO,GAClBK,QAAQC,IAAIR","sources":["src/index.mjs","node_modules/nanoid/index.browser.js","node_modules/nanoid/url-alphabet/index.js"],"sourcesContent":["// \"use strict\"\nimport { nanoid } from 'nanoid';\nconst id = nanoid(5);\nconsole.log(id);","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log2(alphabet.length - 1)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n"],"names":["$baeea73f74760b28$var$id","size","id","bytes","crypto","getRandomValues","Uint8Array","console","log"],"version":3,"file":"index.634fc7c3.js.map"}